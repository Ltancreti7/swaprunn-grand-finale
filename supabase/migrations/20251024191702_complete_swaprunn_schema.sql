-- Complete SwapRunn Database Schema
-- This replaces the incomplete base schema

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop existing tables if they exist (for clean setup)
DROP TABLE IF EXISTS public.swap_usage_records CASCADE;
DROP TABLE IF EXISTS public.assignments CASCADE;
DROP TABLE IF EXISTS public.jobs CASCADE;
DROP TABLE IF EXISTS public.dealership_staff CASCADE;
DROP TABLE IF EXISTS public.staff_invitations CASCADE;
DROP TABLE IF EXISTS public.dealers CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.driver_requests CASCADE;

-- Create enums
DO $$ BEGIN
    CREATE TYPE job_type AS ENUM ('delivery', 'swap', 'parts', 'service');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE user_type AS ENUM ('dealer', 'driver', 'swap_coordinator');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Dealers table
CREATE TABLE public.dealers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  store TEXT,
  address TEXT,
  phone TEXT,
  email TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User profiles (dealership employees & drivers)
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users ON DELETE CASCADE UNIQUE,
  user_type user_type,
  full_name TEXT,
  phone TEXT,
  dealer_id UUID REFERENCES public.dealers(id),
  status TEXT DEFAULT 'active',
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Staff invitations
CREATE TABLE public.staff_invitations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  dealer_id UUID REFERENCES public.dealers(id) NOT NULL,
  email TEXT NOT NULL,
  role TEXT NOT NULL,
  invite_token TEXT UNIQUE NOT NULL,
  invited_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  accepted_at TIMESTAMP WITH TIME ZONE
);

-- Dealership staff
CREATE TABLE public.dealership_staff (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  dealer_id UUID REFERENCES public.dealers(id) NOT NULL,
  role TEXT NOT NULL,
  invited_by UUID REFERENCES auth.users(id),
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, dealer_id)
);

-- Jobs table
CREATE TABLE public.jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  dealer_id UUID REFERENCES public.dealers(id) NOT NULL,
  type job_type NOT NULL,
  status TEXT DEFAULT 'open',
  created_by UUID REFERENCES auth.users(id),
  pickup_address TEXT NOT NULL,
  delivery_address TEXT NOT NULL,
  distance_miles NUMERIC,
  requires_two BOOLEAN DEFAULT false,
  notes TEXT,
  vin TEXT,
  year INTEGER,
  make TEXT,
  model TEXT,
  track_token TEXT UNIQUE,
  customer_name TEXT,
  customer_phone TEXT,
  timeframe TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Assignments table
CREATE TABLE public.assignments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID REFERENCES public.jobs(id) NOT NULL,
  driver_id UUID REFERENCES auth.users(id) NOT NULL,
  status TEXT DEFAULT 'assigned',
  assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  accepted_at TIMESTAMP WITH TIME ZONE,
  started_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(job_id, driver_id)
);

-- Usage tracking for billing
CREATE TABLE public.swap_usage_records (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  dealer_id UUID REFERENCES public.dealers(id) NOT NULL,
  job_id UUID REFERENCES public.jobs(id),
  usage_type TEXT NOT NULL,
  amount_cents INTEGER NOT NULL,
  billing_period TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Legacy driver requests table (for backward compatibility)
CREATE TABLE public.driver_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_by UUID REFERENCES auth.users,
  driver_id UUID REFERENCES auth.users,
  dealership_id UUID,
  type TEXT CHECK (type IN ('delivery','swap','parts','service')),
  vehicle_info JSONB,
  pickup TEXT,
  dropoff TEXT,
  notes TEXT,
  status TEXT DEFAULT 'pending',
  inserted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.dealers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.staff_invitations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.dealership_staff ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.swap_usage_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.driver_requests ENABLE ROW LEVEL SECURITY;

-- Create indexes for performance
CREATE INDEX idx_profiles_user_id ON public.profiles(user_id);
CREATE INDEX idx_profiles_dealer_id ON public.profiles(dealer_id);
CREATE INDEX idx_jobs_dealer_id ON public.jobs(dealer_id);
CREATE INDEX idx_jobs_status ON public.jobs(status);
CREATE INDEX idx_jobs_track_token ON public.jobs(track_token);
CREATE INDEX idx_assignments_job_id ON public.assignments(job_id);
CREATE INDEX idx_assignments_driver_id ON public.assignments(driver_id);
CREATE INDEX idx_dealership_staff_user_id ON public.dealership_staff(user_id);
CREATE INDEX idx_dealership_staff_dealer_id ON public.dealership_staff(dealer_id);

-- Create user profile function
CREATE OR REPLACE FUNCTION public.get_user_profile()
RETURNS TABLE(
  id UUID,
  user_id UUID,
  user_type user_type,
  full_name TEXT,
  phone TEXT,
  dealer_id UUID,
  status TEXT,
  avatar_url TEXT
)
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = 'public'
AS $function$
  SELECT 
    p.id,
    p.user_id,
    p.user_type,
    p.full_name,
    p.phone,
    p.dealer_id,
    p.status,
    p.avatar_url
  FROM public.profiles p
  WHERE p.user_id = auth.uid();
$function$;

-- Pay rate calculation function
CREATE OR REPLACE FUNCTION public.pay_rate_for_distance(distance_miles NUMERIC)
RETURNS INTEGER
LANGUAGE sql
IMMUTABLE
AS $function$
  SELECT CASE 
    WHEN distance_miles <= 5 THEN 2500
    WHEN distance_miles <= 10 THEN 3500
    WHEN distance_miles <= 20 THEN 5000
    WHEN distance_miles <= 35 THEN 7500
    ELSE 10000
  END;
$function$;

-- RLS Policies

-- Profiles policies
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = user_id);

-- Dealers policies
CREATE POLICY "Authenticated users can view dealers" ON public.dealers
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Dealers can update their info" ON public.dealers
  FOR UPDATE TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = id
    )
  );

-- Jobs policies
CREATE POLICY "Dealers can insert jobs" ON public.jobs
  FOR INSERT TO authenticated WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

CREATE POLICY "Users can view relevant jobs" ON public.jobs
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE (
        (p.user_type = 'dealer' AND p.dealer_id = dealer_id) OR
        (p.user_type = 'driver') OR
        (p.user_type = 'swap_coordinator')
      )
    )
  );

CREATE POLICY "Dealers can update their jobs" ON public.jobs
  FOR UPDATE TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

-- Assignments policies
CREATE POLICY "Drivers can view their assignments" ON public.assignments
  FOR SELECT TO authenticated USING (auth.uid() = driver_id);

CREATE POLICY "Dealers can view assignments for their jobs" ON public.assignments
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.jobs j
      JOIN public.get_user_profile() p ON p.dealer_id = j.dealer_id
      WHERE j.id = job_id AND p.user_type = 'dealer'
    )
  );

CREATE POLICY "Drivers can insert assignments" ON public.assignments
  FOR INSERT TO authenticated WITH CHECK (auth.uid() = driver_id);

CREATE POLICY "Drivers can update their assignments" ON public.assignments
  FOR UPDATE TO authenticated USING (auth.uid() = driver_id);

-- Staff management policies
CREATE POLICY "Dealers can view their staff" ON public.dealership_staff
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

CREATE POLICY "Dealers can manage staff" ON public.dealership_staff
  FOR ALL TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

-- Staff invitations policies
CREATE POLICY "Dealers can manage invitations" ON public.staff_invitations
  FOR ALL TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

-- Usage records policies
CREATE POLICY "Dealers can view their usage" ON public.swap_usage_records
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM public.get_user_profile() p 
      WHERE p.user_type = 'dealer' AND p.dealer_id = dealer_id
    )
  );

-- Legacy driver requests policies
CREATE POLICY "Authenticated users can insert requests" ON public.driver_requests
  FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Users can view relevant requests" ON public.driver_requests
  FOR SELECT USING (
    auth.uid() = created_by OR 
    auth.uid() = driver_id
  );

CREATE POLICY "Drivers can update assigned requests" ON public.driver_requests
  FOR UPDATE USING (auth.uid() = driver_id);