-- SwapRunn Launch Database Schema
-- Clean setup for production launch

-- Enable necessary extensions
create extension if not exists "uuid-ossp";

-- User profiles (dealership employees & drivers)
create table if not exists profiles (
  id uuid references auth.users on delete cascade,
  full_name text,
  phone text,
  dealership_id uuid,
  role text check (role in ('sales','inventory','parts','service','driver')),
  status text default 'active',
  avatar_url text,
  inserted_at timestamp with time zone default now(),
  primary key (id)
);

-- Driver and delivery requests
create table if not exists driver_requests (
  id bigint generated by default as identity primary key,
  created_by uuid references auth.users,
  driver_id uuid references auth.users,
  dealership_id uuid,
  type text check (type in ('delivery','swap','parts','service')),
  vehicle_info jsonb,
  pickup text,
  dropoff text,
  notes text,
  status text default 'pending',
  inserted_at timestamp with time zone default now()
);

-- Enable Row Level Security
alter table profiles enable row level security;
alter table driver_requests enable row level security;

-- RLS Policies for profiles table
-- Users can read/insert/update their own profile
create policy "Users can view own profile" on profiles
  for select using (auth.uid() = id);

create policy "Users can insert own profile" on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile" on profiles
  for update using (auth.uid() = id);

-- RLS Policies for driver_requests table
-- Authenticated users can insert requests
create policy "Authenticated users can insert requests" on driver_requests
  for insert to authenticated with check (true);

-- Users can view requests they created or are assigned to
create policy "Users can view relevant requests" on driver_requests
  for select using (
    auth.uid() = created_by OR 
    auth.uid() = driver_id
  );

-- Drivers can update requests assigned to them
create policy "Drivers can update assigned requests" on driver_requests
  for update using (auth.uid() = driver_id);
